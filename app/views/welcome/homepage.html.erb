<!doctype html>
<html>
  <head>
        <link href='http://fonts.googleapis.com/css?family=Yellowtail|Open+Sans:400italic,700italic,400,700' rel='stylesheet' type='text/css'/>
        <style type='text/css'>
                <title>Sketchy 1.0</title>

                body { font-family: "Open Sans", sans-serif; background-color: #222222; padding:2%;}
            h1, h2, h3 { font-family: Yellowtail; font-weight: normal; color: #F2F218; }
      h4 {font-weight:normal; font-family: Yellowtail; color:gray; font-size: 2em;}

            header { text-align: center; }
            header h1 { font-size: 46px; text-align: center; margin: 15px 10px; }
            article h1 { font-size: 26px; margin: 0 0 15px; text-align: left;}

                .canvas { background-color:white; width:95%;}
      .canvas #simple_sketch {
        position:relative;
        width:100%;
        border: 1px solid #ccc;
        margin-top: 0.5%;
      }

      .canvas #tmp_canvas {
        position:absolute;
        cursor:crosshair;
      }
            @media (max-width: 1200px) {
                header, h1 {
                display:none;
                }
                .canvas {
                width:98%;
                }

          .buttons {
            position:relative;
            float:left;
            margin-left:5%;
            margin-top:2%;
            z-index:2;
            }

          }


            body { background: #222222;}
        </style>
  </head>

  <body>
    <!-- Maybe we need to use Ruby form helper. -->
    <form style="display:none" id="form" action="/submissions/save" method="post">
    <input type="text" id="textarea">
    <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
    </form>
        <center><h1>Draw something here!</h1></center><br>
                <article class='example'>
                        <div class="tools">
                                <div class="buttons">
                                        <center>
                                        <a href='#simple_sketch' data-clear='true'><button id ="clear", type="button", class="btn btn-info">Clear</button></a>
                                </center>
                              </div>
                        <center>
      <article class="canvas">
      <div id="simple_sketch">
            <canvas id="paint" width='1700' height='700'></canvas>
      </div>
      </article>
          </center>
      </div>

      <div class="modal fade" id="myModal" role="dialog">
        <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h4 class="modal-title">Type your Username</h4>
        </div>
        <div class="modal-body">

          <form id="username">
            <input type="text" name="user" id="input">

          </form>
        </div>
        <div class="modal-footer">
          <div id="submit">
            <%=button_to "Submit", welcome_submit_path, :method => "get", class: "btn btn-small btn-success"%> </div>
          <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        </div>

      </div>
    </div>
  </div>

  <div>
  <center><button type="button" style="margin-top:10px" class="btn btn-default" data-toggle="modal"  data-target="#myModal" >submit </button>
  </div></center>

      <br>
      </div>
   </article>
  </body>


<script>
var ready;


ready = function() {

  var canvas = document.querySelector('#paint');
  var ctx = canvas.getContext('2d');
  var sketch = document.querySelector('#simple_sketch');
  var sketch_style = getComputedStyle(sketch);
  canvas.width = parseInt(sketch_style.getPropertyValue('width'));
  canvas.height = parseInt(sketch_style.getPropertyValue('height'));

  //var clear_canvas = document.getElementById('paint');

  document.getElementById('clear').addEventListener('click', function() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
      }, false);


  // Creating a tmp canvas
  var tmp_canvas = document.createElement('canvas');
  var tmp_ctx = tmp_canvas.getContext('2d');
  tmp_canvas.id = 'tmp_canvas';
  tmp_canvas.width = canvas.width;
  tmp_canvas.height = canvas.height;
$(tmp_canvas).css({
    "left"     : $('#paint').position().left,
    "top"      : $('#paint').position().top,
});
  sketch.appendChild(tmp_canvas);

  var mouse = {x: 0, y: 0};

  var last_mouse = {x: 0, y: 0};


  // Pencil Points
  var ppts = [];


    var $log = $("#log");

    function updateLog(x, y) {
        $log.html('X: '+x+'; Y: '+y);
    }


  /* Mouse Capturing Work */
  tmp_canvas.addEventListener('mousemove', function(e) {
    mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;
    mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;
  }, false);

  tmp_canvas.addEventListener('touchmove', function(e) {
    e.preventDefault();
    mouse.x = e.targetTouches[0].pageX;
    mouse.y = e.targetTouches[0].pageY;
   updateLog(mouse.x, mouse.y);
}, false);


  /* Drawing on Paint App */
  tmp_ctx.lineWidth = 5;
  tmp_ctx.lineJoin = 'round';
  tmp_ctx.lineCap = 'round';
  tmp_ctx.strokeStyle = 'black';
  tmp_ctx.fillStyle = 'black';

  tmp_canvas.addEventListener('mousedown', function(e) {
    tmp_canvas.addEventListener('mousemove', onPaint, false);

    mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;
    mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;
    updateLog(mouse.x, mouse.y);
    ppts.push({x: mouse.x, y: mouse.y});

    onPaint();
  }, false);

var inc = 0;
  tmp_canvas.addEventListener('touchstart', function(e) {
  tmp_canvas.addEventListener('touchmove', onPaint, false);

    mouse.x = typeof e.offsetX !== 'undefined' ? e.offsetX : e.layerX;
    mouse.y = typeof e.offsetY !== 'undefined' ? e.offsetY : e.layerY;

    ppts.push({x: mouse.x, y: mouse.y});

    onPaint();
  }, false);




  tmp_canvas.addEventListener('mouseup', function() {
    tmp_canvas.removeEventListener('mousemove', onPaint, false);

    // Writing down to real canvas now
    ctx.drawImage(tmp_canvas, 0, 0);
    // Clearing tmp canvas
    tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);

    // Emptying up Pencil Points
    ppts = [];
  }, false);

  tmp_canvas.addEventListener('touchend', function() {
    tmp_canvas.removeEventListener('touchmove', onPaint, false);

    // Writing down to real canvas now
    ctx.drawImage(tmp_canvas, 0, 0);
    // Clearing tmp canvas
    tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);

    // Emptying up Pencil Points
    ppts = [];
  }, false);

  var onPaint = function() {

    // Saving all the points in an array
    ppts.push({x: mouse.x, y: mouse.y});

    if (ppts.length < 3) {
      var b = ppts[0];
      tmp_ctx.beginPath();
      tmp_ctx.arc(b.x, b.y, tmp_ctx.lineWidth / 2, 0, Math.PI * 2, !0);
      tmp_ctx.fill();
      tmp_ctx.closePath();

      return;
    }

    // Tmp canvas is always cleared up before drawing.
    tmp_ctx.clearRect(0, 0, tmp_canvas.width, tmp_canvas.height);

    tmp_ctx.beginPath();
    tmp_ctx.moveTo(ppts[0].x, ppts[0].y);

    for (var i = 1; i < ppts.length - 2; i++) {
      var c = (ppts[i].x + ppts[i + 1].x) / 2;
      var d = (ppts[i].y + ppts[i + 1].y) / 2;

      tmp_ctx.quadraticCurveTo(ppts[i].x, ppts[i].y, c, d);
    }

    // For the last 2 points
    tmp_ctx.quadraticCurveTo(
      ppts[i].x,
      ppts[i].y,
      ppts[i + 1].x,
      ppts[i + 1].y
    );
    tmp_ctx.stroke();

  };

}();



$(document).ready(ready);
$(document).on('page:load', ready);

        $("#submit").click(function(){
           var canvas = document.getElementById("paint");
                             var dataURL = canvas.toDataURL("image/png");
           var user = document.getElementById("input");
           //user= String(user);



           var str= $('input').serialize();

             // Get our file
            var file= dataURLtoBlob(dataURL);

            // Create new form data
            var fd = new FormData();

             // Append our Canvas image file to the form data
            fd.append("image", file);
            fd.append("user", str);
            //alert(fd);
            // And send it
            $.ajax({
               url: "/submissions/save",
               type: "POST",
               data: fd,
               processData: false,
               contentType: false,
            });

           });



           function dataURLtoBlob(dataURL) {
            // Decode the dataURL
            var binary = atob(dataURL.split(',')[1]);
            // Create 8-bit unsigned array
            var array = [];
            for(var i = 0; i < binary.length; i++) {
                array.push(binary.charCodeAt(i));
            }
            // Return our Blob object
            return new Blob([new Uint8Array(array)], {type: 'image/png'});
            }


</script>

</html>


